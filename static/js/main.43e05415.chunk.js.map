{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","myInput","myOutput","outputElements","finaloutput","prepareOutput","bind","updateData","writeMyOutput","document","body","style","tempElements","this","split","forEach","element","inString","passedColon","index","push","className","includes","setState","maxIndex","length","pointer","newOutput","aposthArray","encounteredAposth","tabAmount","console","log","tempIndex","pop","e","target","value","onClick","rows","cols","onChange","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.43e05415.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    \n    this.state = {\n      myInput: \"\",\n      myOutput: \"\",\n      outputElements: \"Output will be here...\",\n      finaloutput:\"\"\n    }\n    this.prepareOutput = this.prepareOutput.bind(this);\n    this.updateData= this.updateData.bind(this);\n    this.writeMyOutput= this.writeMyOutput.bind(this);\n    //For changing the background of the page lol\n    document.body.style = 'background: #282c34;';\n  };\n\n\n  writeMyOutput(){\n\n    let StringElements = \"'\\\"\"\n    let TabOpeners = \"{[\"\n    let TabClosers = \"]}\"\n\n    let tempElements = []\n    this.state.myOutput.split(\"\\n\").forEach(element => {\n\n        let inString = false;\n        let passedColon = false;\n        element.split(\"\").forEach(index => {\n          if(index === \"\\t\"){\n            tempElements.push(<span className=\"App-tab\">&emsp;</span>);\n          }\n          else if(index === \",\"){\n            tempElements.push(<span className=\"App-comma\">,</span>);\n          }\n          else if(StringElements.includes(index)){\n            tempElements.push(<span className=\"App-string\">{index}</span>);\n            inString = !inString;\n          }\n          else if(TabClosers.includes(index) || TabOpeners.includes(index)){\n            tempElements.push(<span className=\"App-paranth\">{index}</span>);\n          }\n          else{\n            if(inString){\n              tempElements.push(<span className=\"App-string\">{index}</span>);\n            }else{\n              if(!passedColon){\n                tempElements.push(<span className=\"App-normal-character\">{index}</span>);\n                if(index === \":\"){\n                  passedColon = true;\n                }\n              }else{\n                tempElements.push(<span className=\"App-var\">{index}</span>);\n              }\n            }\n          }\n\n        });\n        // if(element[0] === \"\\t\"){\n        //   tempElements.push(<span className=\"App-tab\">___</span>);\n        //   tempElements.push(<span className=\"App-tab\"></span>);\n        // }\n       // tempElements.push(<span className=\"App-normal-character\">{element}</span>);\n        tempElements.push(<br></br>);\n      \n    });\n\n    //tempElements.push(<span className=\"App-aposth\">fsafsafa</span>)\n    this.setState({outputElements: tempElements})\n\n\n\n  }\n\n\n\n\n  prepareOutput(){\n    let maxIndex = this.state.myInput.length;\n    let index = 0;\n    let pointer = this.state.myInput[index];\n    let newOutput = \"\";\n    let aposthArray = []\n    let encounteredAposth = false;\n    let LineSkippers = \"{},\"\n    let StringElements = \"'\\\"\"\n    let TabOpeners = \"{[\"\n    let TabClosers = \"]}\"\n    let tabAmount = 0;\n    while(index < maxIndex){\n      pointer = this.state.myInput[index];\n      //TO TAB OR NOT TO TAB!\n      if(TabOpeners.includes(pointer)){\n        tabAmount++;\n        console.log(\"tabAmount\" + tabAmount)\n      }else if(TabClosers.includes(pointer)){\n        tabAmount--;\n      }\n\n\n     \n      if(LineSkippers.includes(pointer)){\n        //inside a string?\n        if(aposthArray.length > 0){\n          newOutput += pointer;\n        }else if(this.state.myInput[index+1] != \"\\n\"){\n          newOutput += pointer;\n\n          newOutput += \"\\n\";\n\n          if(tabAmount > 0){\n            for (let tempIndex = 0; tempIndex < tabAmount; tempIndex++) {\n              newOutput += \"\\t\";\n            }\n          }\n        }else{\n          newOutput += pointer;\n        }\n      }else{\n        //start/end of a string?\n        if(StringElements.includes(pointer)){\n          if(!encounteredAposth){\n            aposthArray.push(pointer)\n            encounteredAposth = true;\n          }else{\n            aposthArray.pop();\n            encounteredAposth = false;\n          }\n        }\n        \n        newOutput += pointer;\n      }\n\n\n\n\n      index++;\n    }\n    this.setState({myOutput: newOutput},\n      () => {\n        // Generating output\n      this.writeMyOutput();\n      })\n  }\n\n  updateData(e){\n\n    this.setState({myInput: e.target.value});\n\n  }\n\nrender(){\n  return (\n    <div className=\"App\" >\n      <center>\n      <button onClick={this.prepareOutput} className = \"App-button\">Beautify</button>\n        <table>\n          <tbody>\n          <tr>\n            <td>\n              <textarea rows=\"10\" cols=\"50\" value={this.state.myInput} onChange={this.updateData} className = \"App-textbox\" placeholder=\"Input will be here...\">{this.state.myInput}</textarea>\n            </td>\n            <td>\n {/*} <textarea rows=\"10\" cols=\"50\" value={this.state.myOutput} className = \"App-textbox\"></textarea> {*/}\n      <div className=\"App-text-container\">\n          <span className=\"App-list\">{this.state.outputElements}</span>\n\n      </div>\n\n            </td>\n          </tr>\n          </tbody>\n\n        </table> \n       \n\n      </center>\n\n    </div>\n  );\n}\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}